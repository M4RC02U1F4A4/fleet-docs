"use strict";(self.webpackChunkfleet_docs=self.webpackChunkfleet_docs||[]).push([[8021],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4646:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={},s="GitRepo Resource",i={unversionedId:"ref-gitrepo",id:"ref-gitrepo",title:"GitRepo Resource",description:"The GitRepo resource describes git repositories, how to access them and where the bundles are located.",source:"@site/docs/ref-gitrepo.md",sourceDirName:".",slug:"/ref-gitrepo",permalink:"/ref-gitrepo",draft:!1,editUrl:"https://github.com/rancher/fleet-docs/edit/main/docs/ref-gitrepo.md",tags:[],version:"current",lastUpdatedAt:1713863090,formattedLastUpdatedAt:"Apr 23, 2024",frontMatter:{},sidebar:"docs",previous:{title:"fleet.yaml",permalink:"/ref-fleet-yaml"},next:{title:"Bundle Resource",permalink:"/ref-bundle"}},c={},l=[],p={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gitrepo-resource"},"GitRepo Resource"),(0,o.kt)("p",null,"The GitRepo resource describes git repositories, how to access them and where the bundles are located."),(0,o.kt)("p",null,"The content of the resource corresponds to the ",(0,o.kt)("a",{parentName:"p",href:"./ref-crds#gitrepospec"},"GitRepoSpec"),".\nFor more information on how to use GitRepo resource, e.g. how to watch private repositories, see ",(0,o.kt)("a",{parentName:"p",href:"/gitrepo-add"},"Create a GitRepo Resource"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: GitRepo\napiVersion: fleet.cattle.io/v1alpha1\nmetadata:\n  # Any name can be used here\n  name: my-repo\n  # For single cluster use fleet-local, otherwise use the namespace of\n  # your choosing\n  namespace: fleet-local\nspec:\n  # This can be a HTTPS or git URL.  If you are using a git URL then\n  # clientSecretName will probably need to be set to supply a credential.\n  # repo is the only required parameter for a repo to be monitored.\n  #\n  repo: https://github.com/rancher/fleet-examples\n\n  # Enforce all resources go to this target namespace. If a cluster scoped\n  # resource is found the deployment will fail.\n  #\n  # targetNamespace: app1\n\n  # Any branch can be watched, this field is optional. If not specified the\n  # branch is assumed to be master\n  #\n  # branch: master\n\n  # A specific commit or tag can also be watched.\n  #\n  # revision: v0.3.0\n\n  # For a private git repository you must supply a clientSecretName. A default\n  # secret can be set at the namespace level using the GitRepoRestriction\n  # type. Secrets must be of the type "kubernetes.io/ssh-auth" or\n  # "kubernetes.io/basic-auth". The secret is assumed to be in the\n  # same namespace as the GitRepo\n  #\n  # clientSecretName: my-ssh-key\n\n  # If fleet.yaml contains a private Helm repo that requires authentication,\n  # provide the credentials in a K8s secret and specify them here.\n  # Danger: the credentials will be sent to all repositories referenced from\n  # this gitrepo. See section below for more information.\n  #\n  # helmSecretName: my-helm-secret\n\n  # Helm credentials from helmSecretName will be used if the helm repository url matches this regular expression.\n  # Credentials will always be used if it is empty or not provided\n  #\n  # helmRepoURLRegex: https://charts.rancher.io/*\n\n  # Contains the auth secret for private Helm repository for each path.\n  # See [Create a GitRepo Resource](.gitrepo-add#use-different-helm-credentials-for-each-path)\n  #\n  # helmSecretNameForPaths: multi-helm-secret\n\n  # To add additional ca-bundle for self-signed certs, caBundle can be\n  # filled with base64 encoded pem data. For example:\n  # `cat /path/to/ca.pem | base64 -w 0`\n  #\n  # caBundle: my-ca-bundle\n\n  # Disable SSL verification for git repo\n  #\n  # insecureSkipTLSVerify: true\n\n  # A git repo can read multiple paths in a repo at once.\n  # The below field is expected to be an array of paths and\n  # supports path globbing (ex: some/*/path)\n  #\n  # Example:\n  # paths:\n  # - single-path\n  # - multiple-paths/*\n  paths:\n  - simple\n\n  # PollingInterval configures how often fleet checks the git repo. The default\n  # is 15 seconds.\n  # Setting this to zero does not disable polling. It results in a 15s\n  # interval, too.\n  # As checking a git repo incurs a CPU cost, raising this value can help\n  # lowering fleetcontroller\'s CPU usage if tens of git repos are used or more\n  #\n  # pollingInterval: 15s\n\n  # Paused  causes changes in Git to not be propagated down to the clusters but\n  # instead mark resources as OutOfSync\n  #\n  # paused: false\n\n  # Increment this number to force a redeployment of contents from Git\n  #\n  # forceSyncGeneration: 0\n\n  # The service account that will be used to perform this deployment.\n  # This is the name of the service account that exists in the\n  # downstream cluster in the cattle-fleet-system namespace. It is assumed\n  # this service account already exists so it should be create before\n  # hand, most likely coming from another git repo registered with\n  # the Fleet manager.\n  #\n  # serviceAccount: moreSecureAccountThanClusterAdmin\n\n  # Target clusters to deploy to if running Fleet in a multi-cluster\n  # style. Refer to the "Mapping to Downstream Clusters" docs for\n  # more information.\n  # If empty, the "default" cluster group is used.\n  #\n  # targets: ...\n\n  # Drift correction removes any external change made to resources managed by Fleet. It performs a helm rollback, which uses\n  # a three-way merge strategy by default.\n  # It will try to update all resources by doing a PUT request if force is enabled. Three-way strategic merge might fail when updating\n  # an item inside of an array as it will try to add a new item instead of replacing the existing one. This can be fixed by using force.\n  # Keep in mind that resources might be recreated if force is enabled.\n  # Failed rollback will be removed from the helm history unless keepFailHistory is set to true.\n  #\n  #  correctDrift:\n  #    enabled: false\n  #    force: false #Warning: it might recreate resources if set to true\n  #    keepFailHistory: false\n')))}u.isMDXComponent=!0}}]);